package com.veeva.vault.custom.triggers;

import java.util.List;

import com.veeva.vault.custom.model.SDKSetting;
import com.veeva.vault.custom.modules.BDLGenerateMultiAgreementTask;
import com.veeva.vault.custom.modules.BDLPopulateMultiAgreementTaskQuery;
import com.veeva.vault.custom.util.BDLUtil;
import com.veeva.vault.custom.util.Log;
import com.veeva.vault.sdk.api.data.RecordEvent;
import com.veeva.vault.sdk.api.data.RecordTrigger;
import com.veeva.vault.sdk.api.data.RecordTriggerContext;
import com.veeva.vault.sdk.api.data.RecordTriggerInfo;

/**
 * Object: bdl_multi_agreement_activity__c
 * Trigger API Name: bdl_multi_agreement_activity_create_task__c
 * Author: Bryan Chan
 * Date: 17 April 2017
 *
 * Automatically create multi-agreement task based on the input of a
 * multi-agreement activity. The configuration for query is configured in the
 * vault_trigger__c object.
 *
 * ON BEFORE INSERT:
 * 1. Populate the # of Task Created, Task Query, Tasks Generated On, Tasks Generated By field
 * 
 * ON BEFORE UPDATE:
 * 1. Refresh the query if no state change
 * 2. Execute the task query and create multi-agreement task
 * 
 * REVISION:
 * 11 Sept 2017 - Added specific scenario for Local Label Update to 
 * join two the results of two separate query
 * 
 */

@RecordTriggerInfo(object = "bdl_multi_agreement_activity__c", 
	events = {RecordEvent.BEFORE_INSERT, RecordEvent.BEFORE_UPDATE })

public class BDLMultiAgreementActivity implements RecordTrigger {

	/* 
	* Trigger override for the execute method
	 * 
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.veeva.vault.sdk.api.data.RecordTrigger#execute(com.veeva.vault.sdk.
	 * api.data.RecordTriggerContext)
	 */
	public void execute(RecordTriggerContext recordTriggerContext) {
		final String methodName = BDLMultiAgreementActivity.class.toString() + ".execute()";
		Log.entry("----" + methodName + "----");
		String event = recordTriggerContext.getRecordEvent().toString();
		// Retrieve VQL statement from Vault Trigger object
		List<SDKSetting> sdkSettings = BDLUtil.retrieveAllSDKSettings();				
		BDLPopulateMultiAgreementTaskQuery bdlPopulateMultiAgreementTaskQuery = new BDLPopulateMultiAgreementTaskQuery(recordTriggerContext, sdkSettings);
		BDLGenerateMultiAgreementTask bdlGenerateMultiAgreementTask = new BDLGenerateMultiAgreementTask(recordTriggerContext, sdkSettings);
		
		switch (event) {
			case "BEFORE_INSERT":
				bdlPopulateMultiAgreementTaskQuery.execute();
				break;
			case "BEFORE_UPDATE":
				bdlPopulateMultiAgreementTaskQuery.execute();
				bdlGenerateMultiAgreementTask.execute();
				break;
			case "BEFORE_DELETE":
				break;
			case "AFTER_INSERT":
				break;
			case "AFTER_UPDATE":
				break;
			case "AFTER_DELETE":
				break;
			default:
				break;
		}
		Log.exit("----" + methodName + "----");
	}
}